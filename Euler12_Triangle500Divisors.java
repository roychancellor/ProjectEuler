/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
import java.lang.Math;
public class Euler12_Triangle500Divisors
{
    public static void main(String args[]) {
        long triangle=1,index=1;
        int divisors=1, factorThreshold=500;
        int maxDiv=1;
        long start=0, end=0, localStart=0;
        
        start = System.currentTimeMillis();
        localStart = start;
        while(divisors <= factorThreshold) {
            triangle += ++index;
            divisors = numFactors(triangle);
            if(divisors > maxDiv) {
                maxDiv = divisors;
                end = System.currentTimeMillis();
                System.out.println(triangle + " has " + divisors + " factors and took " + ((end-localStart)/1000.0) + "sec");
                localStart=end;
            }
        }
        end = System.currentTimeMillis();
        System.out.println("\n" + triangle + " is the first number with > " + factorThreshold + " factors");
        System.out.println("Process took " + ((end-start)/1000.0) + "sec");
    }
    
    public static int numFactors(long testVal) {
        int facCount=2;  //accounts for 1 and the test value
        long maxFac=(long)Math.ceil(Math.sqrt(testVal));  //only need to test for factors up to
        //the square root of the test value
        long i=2;
        while(i<=maxFac) {
            if(testVal % i == 0)
                facCount += 2;  //each time a factor < sqrt(testVal) is found, a factor > sqrt(testVal) is also found
            i++;
        }
        //check for perfect square:  If found, subtract 1 from the count
        if(Math.ceil(Math.sqrt(testVal))*Math.ceil(Math.sqrt(testVal)) == testVal)
            facCount--;

        return facCount;
    }
}
