/**
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
 */
package projecteuler;

public class TriPentaHex {

	public static void main(String[] args) {
		long t = 0;
		for(int nt = 286; nt < 100000; nt++) {
			t = makeTriangularNumber(nt);
			if(isPentagonalNumber(t) && isHexagonalNumber(t)) {
				System.out.println("Found the next one: T = " + t);
				break;
			}
		}
	}

	//NOT USED
	public static boolean isTriangleNumber(int num) {
		//comes from the solution to n^2 + n - 2Tn = 0, where n is the triangle number index and Tn is a triangle number
		//If twoN is an integer, then tn is a triangle number
		if(isInteger((-1 + Math.sqrt(1 + 8 * num)) / 2)) {
			return true;
		}
		return false;
	}

	public static boolean isPentagonalNumber(long num) {
		//comes from the solution to 3n^2 - n - 2Pn = 0, where n is the pentagonal number index and Pn is a pentagonal number
		//If the solution, n, is an integer, then num is a pentagonal number
		if(isInteger((1 + Math.sqrt(1 + 24 * num)) / 6)) {
			return true;
		}
		return false;
	}
	
	public static boolean isHexagonalNumber(long num) {
		//comes from the solution to 2n^2 - n - 2Hn = 0, where n is the hexagonal number index and Hn is a hextagonal number
		//If the solution, n, is an integer, then num is a hexagonal number
		if(isInteger((1 + Math.sqrt(1 + 8 * num)) / 4)) {
			return true;
		}
		return false;
	}
	
	public static boolean isInteger(double num) {
		if(Math.abs(num - (long)num) < 0.000000001) {
			return true;
		}
		return false;
	}

	//Generates the nth triangular number
	public static long makeTriangularNumber(long n) {
		return n * (n + 1) / 2;
	}

	//NOT USED
	//Generates the nth pentagonal number
	public static long makePentagonalNumber(long n) {
		return n * (3 * n - 1) / 2;
	}

	//NOT USED
	//Generates the nth hexagonal number
	public static long makeHexagonalNumber(long n) {
		return n * (2 * n - 1);
	}
}
